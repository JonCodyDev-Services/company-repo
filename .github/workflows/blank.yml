permissions:
  contents: write  # Allows write access to the repository contents
  issues: write    # Allows write access to issues

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  issues:
    types: [opened, assigned]  # Trigger workflow when an issue is created or assigned
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run tests (if set up)
      - name: Run tests
        run: npm test

      # Build project
      - name: Build project
        run: npm run build

      # Commit any changes (if needed)
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          # Check if there are any changes before committing
          if [[ `git diff --cached --stat` != '' ]]; then
            git commit -m "Update file after build"
            git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
          else
            echo "No changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  add_issue_to_project:
    runs-on: ubuntu-latest
    needs: build  # This job runs after the build job
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'assigned')
    steps:
      # Debug step to log the full payload
      - name: Log event payload (for debugging)
        run: |
          echo "Event Name: ${{ github.event_name }}"
          echo "Event Action: ${{ github.event.action }}"
          echo "Issue Number: ${{ github.event.issue.number }}"
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Full Payload: ${{ toJson(github.event) }}"

      - name: Add issue to project board
        uses: actions/github-script@v5
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const project_id = '2';  # Replace this with your GitHub Project ID
            const column_name = 'Backlog';  # Default column to add the issue to (e.g., "Backlog")
            
            try {
              // Fetch columns in the project
              const columns = await github.rest.projects.listColumns({
                project_id: project_id,
              });
              
              // Find the desired column by name
              const targetColumn = columns.data.find(column => column.name === column_name);
              if (targetColumn) {
                // Add the issue to the specified column
                await github.rest.projects.createCard({
                  column_id: targetColumn.id,
                  content_id: issue_number,
                  content_type: 'Issue',
                });
                console.log(`Issue #${issue_number} added to "${column_name}"`);
              } else {
                console.log(`Column "${column_name}" not found in project ${project_id}`);
              }
            } catch (error) {
              console.error('Error adding issue to project:', error);
              throw error;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
