permissions:
  contents: write  # Allows write access to the repository contents
  projects_v2: write  # Allows access to manage GitHub Projects (for moving issues)

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  issues:
    types: [assigned]  # Trigger workflow when an issue is assigned
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Run tests (if set up)
      - name: Run tests
        run: npm test

      # Build project
      - name: Build project
        run: npm run build

      # Modify files (if required)
      - name: Modify files
        run: echo "Changes made by the workflow" >> file.txt

      # Commit the changes (if needed)
      - name: Commit changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add .
          git commit -m "Update file after build"
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Final message after build
      - name: Final message
        run: echo "Project built, tests passed."

  move_to_in_progress:
    runs-on: ubuntu-latest
    needs: build  # Ensure this job runs after the build job
    if: github.event_name == 'issues' && github.event.action == 'assigned'  # Only run when an issue is assigned
    steps:
      - name: Move issue to "In Progress" column in the project board
        uses: actions/github-script@v5
        with:
          script: |
            const issue_number = context.payload.issue.number;
            const project_column_name = 'In Progress';  // The column you want to move the issue to

            // Use your actual project ID
            const project_id = '2';  // Your GitHub Project ID

            // Get project columns
            const columns = await github.projects_v2.listColumns({
              project_id: project_id,
            });

            // Find the "In Progress" column
            const inProgressColumn = columns.data.find(column => column.name === project_column_name);
            if (inProgressColumn) {
              // Move the issue to the "In Progress" column
              await github.projects_v2.createCard({
                column_id: inProgressColumn.id,
                content_id: issue_number,
                content_type: 'Issue',
              });
              console.log(`Issue #${issue_number} moved to "${project_column_name}"`);
            } else {
              console.log(`Column "${project_column_name}" not found.`);
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GitHub automatically handles this token
